/*____________________________________________________________________

	Title: Camouflage_Evolution
	Authors:  George Hancock 
	Date: 27/01/2021
	
.................................................................................................................

Description:
''''''''''''''''''''''''''''''''
Sets up the targets and game screen used for CamoEvo.

*/


setBatchMode(true);



/*
..........................................................................................................................................

															Setup

..........................................................................................................................................

*/



//----------------------------------------------------------------------------------------------------------------
// 0) General
//----------------------------------------------------------------------------------------------------------------



//================================================================
//Functions
//================================================================

// TestPoint
//---------------------------------------------------
function TestPoint(Title) {
Dialog.createNonBlocking("TestPoint");
Dialog.createNonBlocking("Did " + Title + " work?");
Dialog.show();

}


// Setup Clicks
//--------------------------------------------------
rightButton=4;
leftButton=16;


// Index
//---------------------------------------------------
// Allows you to obtain the index of a Value within an Array.

  function index(a, value) {
      for (i=0; i<a.length; i++)
          if (a[i]==value) return i;
      return -1;
  }


// Idle
//---------------------------------------------------
// Allows the program to check wether to go idle during a loop

iSettings = newArray(10000,0, 0, 0);

 function idle(array) {
 
 wGate = 1;
 
 while(wGate==1){
 
 wGate=0;
 
 t=array[0];
 iGate=array[1];
 xM=array[2];
 yM=array[3];

scaleX = getWidth() / screenWidth;
scaleY = getHeight() / screenHeight;

wait(100);
getCursorLoc(xM2, yM2, zM, flag);

getLocationAndSize(x, y, width, height);

width = width*scaleX;
height = height*scaleY;

threshold = 10;
if(flag==02) threshold = 30;

if(iGate>t/5 && xM2>=width-threshold) iGate=t;
if(iGate>t/5 && xM2<= threshold) iGate=t;
if(iGate>t/5 && yM2>=height- threshold) iGate=t;
if(iGate>t/5 && yM2<= threshold)iGate=t;

if(xM2!=xM || yM2!=yM || flag&leftButton != 0 || flag&rightButton != 0  && iGate>=t) Overlay.remove;

if(xM2!=xM || yM2!=yM || flag&leftButton != 0 || flag&rightButton != 0 ) iGate=0;

if(xM2==xM && yM2==yM) iGate=iGate+100;

if(iGate>=t){

	getCursorLoc(xM1, yM1, zM, flag);

	Overlay.add;

	setColor(255,100,100);
	setFont("SansSerif", round(40*scaleX*scaleY));

	Overlay.drawString("Idle", 40*scaleX*scaleY, 40*scaleX*scaleY);

	Overlay.show;

	wait(2500);
	
	wGate=1;

	}


if(iGate>=120000){

waitForUser("Idle for too long, operation paused");

}

}

return newArray(t, iGate, xM2, yM2);

  }


//================================================================
//Population Location
//================================================================


Dialog.create("Choose Directory");
		Dialog.addMessage("________________Choose Folder___________________");
		Dialog.addMessage("Select directory of the evolution game population.");
	Dialog.show();


gameDIR = getDirectory("Select folder you wish to use.");
gameDIR=gameDIR;
tempString = "select=["+ gameDIR+"]";



PopLocal = getDirectory("plugins") + "2 CamoReq/PopLocation.txt";
dataFile = File.open(PopLocal);
print(dataFile, gameDIR );
File.close(dataFile);



//================================================================
//Appearance
//================================================================


setBackgroundColor(50, 50, 50);
setTool("arrow");
ToolOld = 0;



startTimeTest = getTime();
TestTime= getTime()- startTimeTest;

//print(TestTime/1000);

setBatchMode(true);

if (isOpen("ROI Manager")) {
selectWindow("ROI Manager");
run("Close");
}


if( startsWith(getInfo("os.name"), "Windows") ==1){
LoadingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Loading/01.jpg";
} else {
LoadingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Loading/";
}

if( startsWith(getInfo("os.name"), "Windows") ==1){
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/01.jpg";
} else {
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/";
}



//----------------------------------------------------------------------------------------------------------------
// 1) Get Scale Settings & Open Loading Screen if it isn't open
//----------------------------------------------------------------------------------------------------------------


//Obtain Scales
//------------------

screenScales = getDirectory("plugins") + "2 CamoReq/GameModule/screenScales.txt";

screenSettings = File.openAsString(screenScales);
screenSettings = split(screenSettings, "\n");

interfaceX= parseFloat(screenSettings[0] );
interfaceY= parseFloat( screenSettings[1] );
interfaceW= parseFloat( screenSettings[2] );
interfaceH= parseFloat( screenSettings[3] );

gameARatio= parseFloat( screenSettings[4] );


interfaceHeight= 1130;
interfaceWidth= 1130*gameARatio;


iButtonShift = (interfaceWidth - 1478);




//Open Loading
//------------------
if(!isOpen("Loading")){
run("Image Sequence...", "open=[&LoadingDirectory] sort");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
run("Animation Options...", "speed="+6);
doCommand("Start Animation");
}

selectImage("Loading");


/*
..........................................................................................................................................

														Operate Game

..........................................................................................................................................

*/






//----------------------------------------------------------------------------------------------------------------
// 0) Setup New Generation
//----------------------------------------------------------------------------------------------------------------



//=========================
//Get Population Settings
//=========================

GameDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/";


PopLocal = getDirectory("plugins") + "2 CamoReq/PopLocation.txt";
PopLocation = File.openAsString(PopLocal);
PopLocation=split(PopLocation, "\n");
PopLocation = PopLocation[0];
PopLocation = PopLocation;

if(!File.exists(GameDirectory+"01.jpg")){
exit("Game Screen Img, missing, reinstall suggested");
}

PopulationSet = PopLocation+"Settings_Population.txt";
PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");

TargetSet = split(PopulationSettings[0],"\t");
TargetSetting = TargetSet[1];

PopSize = split(PopulationSettings[2],"\t");
PopSize = PopSize [1];


TimeOutTime = split(PopulationSettings[4],"\t");
TimeOutTime = parseFloat(TimeOutTime [1]);

numPerSlide = split(PopulationSettings[3],"\t");
numPerSlide = parseFloat(numPerSlide [1]);

PopulationSet = PopLocation+"Settings_Population.txt";


DefaultDirectory = getDirectory("plugins") + "2 CamoReq/GameModule/popSettingsDefault.txt";

if(!File.exists(PopulationSet)){

File.copy(DefaultDirectory, PopulationSet);

}



PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");


TargetSet = split(PopulationSettings[0],"\t");
TargetSetting = TargetSet[1];

FitnessM = split(PopulationSettings[7],"\t");
FitnessMeasure = FitnessM[1];


if(PopulationSettings.length<9){

fitnessMethod = "Survival"; // (left&right , survival, response, capture, rank)

transitionMethod = "Centre"; // (centre, click, wait)

trainingMethod = "None"; // (None, First, Every, Resurrect)

trainingNumber = 0;

} else {

tempA = split(PopulationSettings[8],"\t");
fitnessMethod = tempA[1];

tempA = split(PopulationSettings[9],"\t");
transitionMethod = tempA[1];

tempA = split(PopulationSettings[10],"\t");
trainingMethod = tempA[1];

tempA = split(PopulationSettings[11],"\t");
trainingNumber = parseFloat(tempA[1]);


}











//=========================
//Get Target Settings
//=========================

TargetChoice = TargetSetting;

TargetDirectory = getDirectory("plugins")+ "1 CamoEvo/Targets/";

TargetSettings = File.openAsString(TargetDirectory+"Target_Settings.txt");
TargetSettingsRows = split(TargetSettings , "\n");

for(i=0; i<TargetSettingsRows.length; i++){
temp = TargetSettingsRows[i];

if(startsWith(temp, TargetChoice)){
TargetSetting = temp;
}

}

TargetChoiceSettings = split(TargetSetting, "\t");

TargetChoiceShape = TargetChoiceSettings[1];
TargetChoiceScale = parseFloat(TargetChoiceSettings[2]);
TargetPatternChoice = TargetChoiceSettings[3];
TargetChoiceMinRotation = parseFloat(TargetChoiceSettings[5]);
TargetChoiceMaxRotation = parseFloat(TargetChoiceSettings[6]);


capture="response";
if(numPerSlide>1) capture="rank";

SettingPath = gameDIR + "Settings_Game.txt";

settingGate=1;
if(!File.exists(SettingPath)) settingGate=0;

if(settingGate==1){
test = File.openAsString(SettingPath);
test = split(test,"\n");
if(test.length<5)  settingGate=0;
}

if(settingGate==0){

dataFile = File.open(SettingPath);  // writes the pattern genome to a temporary text file, which the target generator then uses.

print(dataFile, "TargetSize =	"+TargetChoiceScale+"px		( The size of the given target in either pixels [px] or cm [cm] )");
print(dataFile, "NumPerSlide =	"+numPerSlide+"		( The number of targets shown per slide )");
print(dataFile, "Angles =	"+TargetChoiceMinRotation+"	"+TargetChoiceMaxRotation+"	( The range of angles the target can have )");
print(dataFile, "TimeOutTime = 	"+TimeOutTime+"		( The maximum time per slide )");
print(dataFile, "SpawnMethod =	random		( The target spawning method [random, L*a*b* nearest,  L*a*b* furthest] )");
print(dataFile, "CaptureMethod =	"+capture+"	( The method used to determine capture [click,response,left&right,rank] )");
print(dataFile, "TransitionMethod =	centre	( The method used to change between slides [centre,click,wait] )");
print(dataFile, "TrainingNumber =	"+trainingNumber+"	( The number of dummy targets used at the beginning )");
print(dataFile, "Repeats =	1		( The number of repeats per individual )");
print(dataFile, "ClickLeeWay =	0.5		( The click leeway based on the size of the target [e.g. 0.5 = + 50%] )");
print(dataFile, "CropWidth =	1478		( The crop width CAN'T BE BIGGER THEN SOURCE IMAGE )");
print(dataFile, "CropHeight =	1130		( The crop height CAN'T BE BIGGER THEN SOURCE IMAGE  )");
print(dataFile, "CropMode = 	centre		( The crop location [centre or random]  )");
print(dataFile, "FailTrigger =	none		( Fail conditions other then time out [miss, react, miss/react] )");
print(dataFile, "TargetMod =	none	( runs imageJ script on target )");
print(dataFile, "ImageMod =	none		( runs imageJ script on whole image )");


	
File.close(dataFile);

}




//=========================
//Get Game Settings
//=========================
//Opens the Game Settings and Adjusts them to there set values.

GameDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/";

if(!File.exists(GameDirectory+"01.jpg")){
exit("Game Screen Img, missing, reinstall suggested");
}

gameSet = gameDIR+"Settings_Game.txt";
gameSettings = File.openAsString(gameSet);
gameSettings = split(gameSettings , "\n");

//Size
//.........
tArr = split(gameSettings[0],"\t");
TargetSize = tArr[1];
TargetChoiceScale = replace(TargetSize,"px","");
TargetChoiceScale = parseFloat(TargetChoiceScale);

//numPerSlide
//.........
tArr = split(gameSettings[1],"\t");
numPerSlide = parseFloat(tArr[1]);


//Angles
//.........
tArr = split(gameSettings[2],"\t");
minAngle = parseFloat(tArr[1]);
maxAngle = parseFloat(tArr[2]);


//TimeOut
//.........
tArr = split(gameSettings[3],"\t");
TimeOutTime = parseFloat(tArr[1]);


//Spawn
//.........
tArr = split(gameSettings[4],"\t");
spawnSystem= tArr [1];


//Capture
//.........
tArr = split(gameSettings[5],"\t");
captureMethod= tArr [1];


//Transition
//............
tArr = split(gameSettings[6],"\t");
transitionMethod= tArr [1];



//TrainingNumber
//.............
tArr = split(gameSettings[7],"\t");
trainingNumber= parseFloat(tArr[1]);


//Repeats
//.........
tArr = split(gameSettings[8],"\t");
repeatPlays = tArr [1];


//clickLeeway
//.........
tArr = split(gameSettings[9],"\t");
clickLeeway = parseFloat(tArr [1]);


//cropWidth
//.........
tArr = split(gameSettings[10],"\t");
cropWidth = parseFloat(tArr [1]);


//cropHeight
//.........
tArr = split(gameSettings[11],"\t");
cropHeight = parseFloat(tArr [1]);


//cropMode
//.........
tArr = split(gameSettings[12],"\t");
cropMode = tArr[1];


//failTrigger
//.........
tArr = split(gameSettings[13],"\t");
failTrigger = tArr[1];



//targetMod
//.........
tArr = split(gameSettings[14],"\t");
targetMod = tArr[1];




//imageMod
//.........
tArr = split(gameSettings[15],"\t");
imageMod = tArr[1];






//=========================
//Check for Generation 0
//=========================

//If there is no Generation 0 Create one
//----------------------------------------------

if(!File.exists(PopLocation+"gen_0_genes.txt")){

//run("CamoEvo ImageGA Relay");


populatorDirectory1= "select_folder=[" + PopLocation+ "]";


populatorDirectory2= " select_template=[" + getDirectory("plugins") + "2 CamoReq/Target_Gen/Template_"+TargetPatternChoice+".txt]";




populatorDirectory = populatorDirectory1+populatorDirectory2;

run("Assign Algorithm Settings");

print(populatorDirectory);

run("ImageGA Populator", populatorDirectory);




run("Colour Range Modifier");

}



checkZ=1;

runCount=-1;

while(checkZ==1){



CheckDirectory = PopLocation;

checkA = 1;
checkB1 = getFileList(CheckDirectory);
checkB1 = checkB1.length;

checkB2 = getFileList(CheckDirectory);
checkB2 = checkB2.length;



while(checkA==1){

setBatchMode(true);

//===============================
//Get Current Generation
//===============================

CheckDirectory = PopLocation;

GeneratArray = newArray();

GeneratList  =  getFileList(CheckDirectory);


for(i=0; i<GeneratList.length; i++) { // list all .txt files

	if(endsWith(GeneratList[i], "_ranks.txt")==1)

		GeneratArray = Array.concat(GeneratArray, GeneratList[i]);
}



ArrayLeng = lengthOf(GeneratArray);

csv = ".txt";
tif = ".tif";
txt = ".txt";
png = ".png";

GenNumber = ArrayLeng;
GenNum = CheckDirectory + "gen_" + GenNumber + "_genes" + txt;
GenName = "gen_" + GenNumber  + "_genes" +  txt;
SurvGenNum= CheckDirectory + "gen_" + GenNumber +"_ranks" + txt;

runCount=runCount+1;


//===============================
//Run Evolving Animation
//===============================

if(!isOpen("Evolving")){
run("Image Sequence...", "open=[&EvolvingDirectory] sort");
}

if(runCount==0){

if(isOpen("Evolving")){

selectImage("Evolving");
setBatchMode("show");
run("Maximize");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
for(i=0;i<4;i++){
setSlice(i+1);

 setFont("Caldibri ", 52, "bold");
 setColor( "#16150D");

fillRect(154 + (iButtonShift/2), 426, 1176, 204);

 setColor("white");



setJustification("center");

 stringT= " Evolving Generation "+GenNumber+" ... ";

 drawString(stringT, 740 + (iButtonShift/2), 552, "#16150D");



}

run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);


if(isOpen("Evolving")){
selectImage("Evolving");
run("Animation Options...", "speed="+6);
doCommand("Start Animation");
}
}
}


//===============================
//Hide Loading Animation
//===============================

if(isOpen("Loading")){
selectImage("Loading");
setBatchMode("hide");
}



//===============================
//Check if Generation Exists
//===============================
TrainPath = CheckDirectory + "Training/";
if(trainingMethod != "none" )if(!File.exists(TrainPath)) File.makeDirectory(TrainPath);




if(File.exists(GenNum)){

GenerationString=File.openAsString(GenNum);	// open txt data file
GenerationRows=split(GenerationString, "\n");
PatternTemplate = getDirectory("plugins") + "2 CamoReq/PatternTemplate.txt";



//==================================
//Create Population
//==================================




//Create Image Directory
//---------------------------------

fold = "GenPat_" + GenNumber;
foldOld = "GenPat_" + GenNumber-1;
PatternPath = CheckDirectory + fold;
PriorPath = CheckDirectory + foldOld;


if(GenNumber>0 && trainingMethod == "First") trainingNumber = 0;
if(trainingMethod == "none") trainingNumber = 0;

//Work out existing patterns
//---------------------------------
//IF there is already patterns for that Generation,don't remake them.
// If the file already exists and its size == the desired pop size then don't make pattersn.


CheckLength = getFileList(PatternPath);

if(CheckLength.length<PopSize || !File.exists(PatternPath)) {
File.makeDirectory(PatternPath );


//Temporary
if(GenNumber>0){ 	 // if it is generation 1 or higher it will check which individuals have survived without mutating, and save them without remaking them. 
					 // this preserves the exact same phenotype.
				
				
notMade=newArray();

for(i=1; i<GenerationRows.length; i++){
Temp = split(GenerationRows[i], "\t");
Temp = Temp[0];
patternGet = PriorPath + "/" + Temp + tif;


if(File.exists(patternGet) == 1){
	while(!isOpen(Temp + tif)){
	open(patternGet);
}

selectImage(Temp + tif);

title = getTitle();
newName = replace (title, ".tif", "");
rename(newName);


} else {
	str=GenerationRows[i];
	notMade=Array.concat(notMade,str);
}



}



dataFile = File.open(PatternTemplate);  // writes the pattern genome to a temporary text file, which the target generator then uses.

	print(dataFile, GenerationRows[0]);
	
	for(i=0; i<notMade.length; i++){
	print(dataFile, notMade[i]);
	}
	
	
		if(trainingMethod == "Every"){
	
			trainArray = split(GenerationRows[GenerationRows.length-1], "\t");
			
			for(i=0; i<trainingNumber*numPerSlide; i++){	// writes the pattern genome to a temporary text file, which the target generator then uses.
			
			trainArray[0] = "Train_"+i;
			
			for(j=3;j<trainArray.length;j++){
			trainArray[j] = random();
			}
			
			trainString = String.join(trainArray,"\t");
			
			print(dataFile, 	trainString);
			
			}
		
		
		} // Train
	
	
	File.close(dataFile);

}


//Copy all if Gen = 0
//---------------------------------

if(GenNumber==0){ // if it is generation 0 it will need to generate all the patterns no matter what.

	dataFile = File.open(PatternTemplate);
	
	for(i=0; i<GenerationRows.length; i++){	// writes the pattern genome to a temporary text file, which the target generator then uses.
	
	print(dataFile, GenerationRows[i]);
	
	}
	
	
		if(trainingMethod != "none"){
	
			trainArray = split(GenerationRows[GenerationRows.length-1], "\t");
			
			for(i=0; i<trainingNumber*numPerSlide; i++){	// writes the pattern genome to a temporary text file, which the target generator then uses.
			
			trainArray[0] = "Train_"+i;
			
			for(j=3;j<trainArray.length;j++){
			trainArray[j] = random();
			}
			
			trainString = String.join(trainArray,"\t");
			
			print(dataFile, 	trainString);
			
			}
		
		
		} // Train
	
	
	
	File.close(dataFile);
}




//Create Patterns
//--------------------------------
// Users can add direction to different pattern generation scripts here.



generateString = "Generate "+ TargetPatternChoice;

run(generateString);

//Save Patterns
//---------------------------------

WinNam = getList("image.titles");
Win = lengthOf(WinNam);

for ( i=0; i<Win; i++ ) { 

	pat = "/" + WinNam[i] + tif;
	PatternPath = CheckDirectory + fold + pat;

	selectWindow(WinNam[i]);

	if(endsWith(WinNam[i], ".tif")){

	close(WinNam[i]);
	} else {

		if(startsWith(WinNam[i], "Gen")==1 || startsWith(WinNam[i], "gloss")==1){

		saveAs("Tiff", PatternPath); 

		close(WinNam[i]+".tif");

		} // GenTarget
		
		
		if(startsWith(WinNam[i], "Train")==1){

		saveAs("Tiff", TrainPath + WinNam[i] + tif); 

		close(WinNam[i]+".tif");

		} // GenTarget


	}
} // (i)



}



//Save Ressurected
//---------------------------------
if(trainingMethod == "Resurrect" && GenNumber>0){
oldTargets = getFileList(CheckDirectory + "GenPat_"+GenNumber-1+"/");
newTargets = getFileList(CheckDirectory + "GenPat_"+GenNumber+"/");

dummyTargets = newArray();

inD = 0;
while(dummyTargets.length<trainingNumber*numPerSlide){

tStr = oldTargets[inD];
checkExist = index(newTargets,tStr);
checkExist2 =  index(newTargets,replace(tStr,"ID","IDR"));

if(checkExist==-1 && checkExist2 == -1) dummyTargets = Array.concat(dummyTargets, tStr);

inD = inD+1;

}

for(i=0;i<dummyTargets.length;i++){
File.copy(CheckDirectory + "GenPat_"+GenNumber-1+"/"+dummyTargets[i], CheckDirectory+"training/"+"Train_"+i+".tif");

} //(i)


} // Resurrect




PatternCombinedPath = CheckDirectory + "Combined_"+fold+"/";
PatthernPath = CheckDirectory+fold+"/";

TargetPath = CheckDirectory+"Targets/";
RemovePath = CheckDirectory+"Blank/";

if(File.exists(TargetPath)) File.rename(TargetPath,RemovePath);



File.rename(PatthernPath,TargetPath);
wait(1000);

if(!File.exists(TargetPath)){
File.rename(PatthernPath,TargetPath);
wait(1000);
}

if(!File.exists(TargetPath)){
File.rename(PatthernPath,TargetPath);
wait(1000);
}


if(File.exists(gameDIR +"psychOutput.txt")) File.delete(gameDIR +"psychOutput.txt");

//----------------------------------------------------------------------------------------------------------------
// 3) Run the Game
//----------------------------------------------------------------------------------------------------------------


//================================================
//Ask to Play Screen
//================================================


// Open Screen
//---------------------------------

if(!isOpen("Game")){
if( startsWith(getInfo("os.name"), "Windows") ==1){
playDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/01.jpg";
} else {
playDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Game/";
}
run("Image Sequence...", "open=[&playDirectory] sort");
}
selectImage("Game");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");






//================================================
//Play Psychophysics Game
//================================================


DirectoryString= "select=[" + CheckDirectory+ "]";

run("Psychophysics Game", DirectoryString);


File.rename(TargetPath,PatthernPath);



//================================================
//Relabel Output
//================================================

if(!File.exists(gameDIR +"psychOutput.txt")){ exit }
psychOutput = File.openAsString(gameDIR +"psychOutput.txt");
psychRows = split(psychOutput, "\n");

rankRows = newArray();

for(i=0;i<psychRows.length;i++){

tArray  = split(psychRows[i], "\t");

tArray1 = tArray[0];
tArray2 = Array.deleteIndex(tArray,0);

if(i==0){ tString = "Fitness";

} else{

if(fitnessMethod == "Rank") tString= tArray[1];
if(fitnessMethod == "Survival") tString= tArray[2];
if(fitnessMethod == "Response")  tString= tArray[3];
if(fitnessMethod == "Capture" || fitnessMethod == "Left&Right") tString= tArray[4];

if(FitnessMeasure=="Signalling") tString=parseFloat(tString)*-1;

}

tArray3=Array.concat(tArray1, tString, tArray2);

rankRows = Array.concat(rankRows, String.join(tArray3,"\t") );



}





if(File.exists(SurvGenNum)==1){
File.delete(SurvGenNum);
}


for(i=0; i<rankRows.length; i++){

	File.append(rankRows[i], SurvGenNum);

}







/*
..........................................................................................................................................

														Evolve Next Generation

..........................................................................................................................................

*/



//----------------------------------------------------------------------------------------------------------------
// 0) Run Finale Features
//----------------------------------------------------------------------------------------------------------------

//=========================
//Run Evolving Animation
//========================


if(isOpen("Evolving")){
selectImage("Evolving");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
for(i=0;i<4;i++){
setSlice(i+1);

 setFont("Caldibri ", 52, "bold");
 setColor( "#16150D");

fillRect(154 + (iButtonShift/2), 426, 1176, 204);


 setColor("white");



setJustification("center");

 stringT= " Evolving Generation "+(GenNumber+1)+" ... ";

 drawString(stringT, 740 + (iButtonShift/2), 552);

}

selectImage("Evolving");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);

run("Animation Options...", "speed="+6);
doCommand("Start Animation");
}





} // exists

//----------------------------------------------------------------------------------------------------------------
// 1) Run Genetic Algorithm
//----------------------------------------------------------------------------------------------------------------

//==============================
//Image GA
//==============================




setBatchMode(true);

DirectoryString= "select=[" + CheckDirectory+ "]";
run("ImageGA Algorithm", DirectoryString);



//========================================
//Check whether a new generation was made?
//=======================================



checkB1 = getFileList(CheckDirectory);
checkB1 = checkB1.length;


	if(checkB1>checkB2){

	checkB2 = getFileList(CheckDirectory);
	checkB2 = checkB2.length;
	
	} else {

	checkA=0;

	}



} // This will Loop until ImageGA stops producing new generations



/*
..........................................................................................................................................

															End Screen

..........................................................................................................................................

*/



//----------------------------------------------------------------------------------------------------------------
// 0) Show End Menu
//----------------------------------------------------------------------------------------------------------------

//=======================================
//Hide Loading
//=======================================
if(!isOpen("Loading")){
run("Image Sequence...", "open=[&LoadingDirectory] sort");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
}
selectImage("Loading");
setBatchMode("hide");



checkZ=0;



//=======================================
//Open End Screen
//=======================================


if(!isOpen("EndScreen")){
if( startsWith(getInfo("os.name"), "Windows") ==1){
FinishedDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/End/01.jpg";
} else {
FinishedDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/End/";
}


run("Image Sequence...", "open=[&FinishedDirectory] sort");
rename("EndScreen");

}

selectImage("EndScreen");

run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);

Slide=1;


//=======================================
//Close Evolving
//=======================================
if(isOpen("evolving")){
close("evolving");
}


//BUTTON 1, Run Camo Anlysis
//-----------------------------------------


	b1_x1= 386 + (iButtonShift/2);
	b1_y1= 478;

	b1_x2= b1_x1 + 694;
	b1_y2= b1_y1 + 156;
	
	
//BUTTON 2, Play More
//-----------------------------------------


	b2_x1= 386 + (iButtonShift/2);
	b2_y1= 688;

	b2_x2= b2_x1 + 694;
	b2_y2= b2_y1 + 156;
	
	
//BUTTON 3, Exit
//-----------------------------------------


	b3_x1= 386 + (iButtonShift/2);
	b3_y1= 896;

	b3_x2= b3_x1 + 694;
	b3_y2= b3_y1 + 156;
	
	


keepGoing=0;
whileGate2=0;

selectImage("EndScreen");
run("Select None");

wait(100);



while(whileGate2==0){

iSettings = idle(iSettings);


	setSlice(Slide);

	selectImage("EndScreen");

	
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
	
		{


		clickX=mouseX;  
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		
		Tool=1;
		Tool=1;   if(flag&leftButton!=0){wait(75);
		keepGoing=0;
		whileGate2=1;

		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {


		Tool=1;
		Tool=1;   if(flag&leftButton!=0){wait(75);
		keepGoing=1;
		whileGate2=1;

		}
		}
		
		//Button 3
		//-----------------
		if( clickX > b3_x1   &&    clickX < b3_x2   &&   clickY > b3_y1 &&  clickY < b3_y2) {

		Tool=1;
		Tool=1;   if(flag&leftButton!=0){wait(75);
		
if(isOpen("Loading")){
selectImage("Loading");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}
doCommand("CamoEvo Game");
exit

		}
		}

		run("Select None");
		if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}

		}




}





//----------------------------------------------------------------------------------------------------------------
// 1) Run for 5 Additional Generations
//----------------------------------------------------------------------------------------------------------------

//=================================================
// Loop if you Choose to Keep Going
//=================================================
if(keepGoing==1){
setBatchMode("hide");


selectImage("Loading");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");

//=================================================
// Add 5 generations to Population Settings
//=================================================
PopulationSet = PopLocation+"Settings_Population.txt";
PopulationSettings = File.openAsString(PopulationSet );
PopulationSettings = split(PopulationSettings, "\n");

Line1=PopulationSettings [0];
Line2=PopulationSettings [1];
Line3=PopulationSettings [2];
Line4=PopulationSettings [3];
Line5=PopulationSettings [4];
Line6=PopulationSettings [5];
Line7=PopulationSettings [6];
Line8=PopulationSettings [7];

Line2 = split(Line2,"\t");
Line2 = newArray(Line2[0], parseFloat(Line2[1])+5);
Line2 = String.join(Line2,"\t");

PopulationSettings= String.join(Array.concat(Line1,Line2,Line3,Line4,Line5,Line6,Line7,Line8), "\n");


File.delete(PopulationSet);
File.append(PopulationSettings,PopulationSet);


checkZ=1;

//=================================================
// Add 5 generations to Algorithm Settings
//=================================================
AlgorithimSet = PopLocation+"AlgorithmSettings.txt";
AlgorithimSettings = File.openAsString(AlgorithimSet);
AlgorithimSettings = split(AlgorithimSettings, "\n");
AlgorithimSettings[3]=parseFloat(AlgorithimSettings[3])+5;
AlgorithimSettings = String.join(AlgorithimSettings, "\n");

File.delete(AlgorithimSet);

File.append(AlgorithimSettings, AlgorithimSet);



if( startsWith(getInfo("os.name"), "Windows") ==1){
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/01.jpg";
} else {
EvolvingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Evolving/";
}


if(!isOpen("Evolving")){
run("Image Sequence...", "open=[&EvolvingDirectory] sort");
}




//----------------------------------------------------------------------------------------------------------------
// 2) Run Analyses
//----------------------------------------------------------------------------------------------------------------
} else{


//=================================================
//Close Unnecesary Slides
//=================================================

if(!isOpen("Evolving")){
close("Evolving");
}
if(!isOpen("Evolving")){
close("Evolving");
}



//=================================================
//Run Analysing Animation
//=================================================


if( startsWith(getInfo("os.name"), "Windows") ==1){
AnalysingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Analysing/01.jpg";
} else {
AnalysingDirectory = getDirectory("plugins") + "1 CamoEvo/Interface/Analysing/";
}


run("Image Sequence...", "open=[&AnalysingDirectory] sort");
rename("Analysing");
run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");


if(isOpen("EndScreen")){
selectImage("EndScreen");
setBatchMode("hide");
}




//=================================================
//Get Data
//=================================================

// Get Fitness
//------------------

		survivalDIR = CheckDirectory;

		survivalArray = newArray();

		survivalList  =  getFileList(survivalDIR);

		Leng = lengthOf(survivalList);

		for(i=0; i<Leng; i++) { 
			if(endsWith(survivalList[i], "_ranks.txt")==1){

				survivalArray = Array.concat(survivalArray, survivalList[i]);
			}}


		GenArray = newArray();
		IDarray = newArray();
		FitnessArray = newArray();
		RankingArray = newArray();
		SurvivalArray = newArray();
		ResponseArray = newArray();
		CaptureArray = newArray();
		
		
		FitnessMean=newArray();

		shortGenArray = newArray();
		FitnessMeanArray = newArray();
		FitnessErrorArray = newArray();
		TimeoutArray = newArray();
		genomeArray = newArray();


		for (i=0; i<survivalArray.length; i++){
		
		IDtempArray=newArray();

		GenNum = survivalDIR + "gen_" + i + "_ranks" + txt;
		GenName = "gen_" + i + "_ranks" + txt;

		referenceString=File.openAsString(GenNum);	// open txt data file
		referenceRows=split(referenceString, "\n");
		referenceRows = Array.deleteIndex(referenceRows, 0);
		
		L = referenceRows.length;

		IDs = newArray(L);
		Fitness = newArray(L);
		Ranking =  newArray(L);
		Survival  =  newArray(L);
		
		Response = newArray(L);
		Capture = newArray(L);
		
		Real=newArray(L);
		
		TimeOut = 0;

		for(f=0; f<L; f++){
		
		Temp=split(referenceRows[f], "\t");
		
		GenArray = Array.concat(GenArray, i);
		
		IDs[f] = Temp[0];
		
		Fitness[f]= Temp[1];
		Ranking[f] = Temp[2];
		Survival[f] = Temp[3];
		Response[f] = Temp[4];
		Capture[f] = Temp[5];

		if(Fitness[f]==TimeOutTime){
		TimeOut = TimeOut+1;
		}


		if(Temp.length==3){
		Real[f] = Temp[2];
		}else{
		Real[f] = "";
		}
		}
		
		//Array.show(IDs);
		
		GenomeNum = survivalDIR + "gen_" + i + "_genes" + txt;
		
		
		referenceString=File.openAsString(GenomeNum);	// open txt data file
		referenceRows=split(referenceString, "\n");
		GenomeNames = referenceRows[0];
		GenomeNames = split(GenomeNames,"\t");
		GenomeNames = Array.deleteIndex(GenomeNames, 0);
		GenomeNames = String.join(GenomeNames, "\t");
		referenceRows = Array.deleteIndex(referenceRows, 0);
		
	
		//Array.show(referenceRows);
		
		L = referenceRows.length;
		
		for(f=0; f<L; f++){
		IDname = IDs[f];
		
		for(v=0; v<L; v++){
		splitStr = split(referenceRows[v],"\t");
		if(splitStr[0] == IDname){
		genomeStr = Array.deleteIndex(splitStr, 0);
		genomeStr =String.join(genomeStr, "\t");
		genomeArray=Array.concat(genomeArray, genomeStr);
		}
		}
		
		
		}
		
		
		shortGenArray = Array.concat(shortGenArray, i);

		TimeoutArray = Array.concat(TimeoutArray, TimeOut);

		if(numPerSlide==1){
		Array.getStatistics(Survival, min, max, mean, stdDev);
		} else {
		Array.getStatistics(Capture, min, max, mean, stdDev);
		}

		FitnessMeanArray = Array.concat(FitnessMeanArray, mean);
		FitnessErrorArray =  Array.concat(FitnessErrorArray, stdDev/Math.sqrt(Fitness.length));

		FitnessArray = Array.concat(FitnessArray, Fitness);
		RankingArray = Array.concat(RankingArray, Ranking);
		SurvivalArray = Array.concat(SurvivalArray, Survival);
		ResponseArray = Array.concat(ResponseArray, Response);
		CaptureArray = Array.concat(CaptureArray, Capture);
		
		RealArray = Array.concat(RealArray, Real);
		IDarray = Array.concat(IDarray, IDs);

		

		}
		
		


	
	//Array.show("check2",genomeArray);
		

		 
				//  Line Plot
				 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				Array.getStatistics( FitnessMeanArray, min, max, mean, stdDev);
				yMax = max;
				Array.getStatistics( FitnessErrorArray, min, max, mean, stdDev);
				yMax = yMax + max +1000;
				if(yMax>=TimeOutTime){
				yMax=TimeOutTime;
				}
				Plot.create("Line Plot", "Generation", "Survival Time (milliseconds)", shortGenArray, FitnessMeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, 0, yMax);
				Plot.setLineWidth(2);
				Plot.add("error bars", FitnessErrorArray);
				Plot.show();





run("Select All");
run("Duplicate...", "title=CopyPlot");
run("Invert");
selectImage("CopyPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;



ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);


//Array.show("check_old",GenArray, IDarray, FitnessArray);



// Get Luminance, Colour, Pattern, Gabrat
//--------------------------------------------


		Leng = lengthOf(survivalList);
	
		LumArray2 = newArray();
		PatternArray2 = newArray();
		ColourArray2 = newArray();
		GabRatArray2 = newArray();
		
		GabRatArray_A2 = newArray();
		GabRatArray_B2 = newArray();
		
			
		bgLumArray2 = newArray();
		bgCtrstArray2 = newArray();
		bgAvalArray2 = newArray();
		bgBvalArray2 = newArray();
		
		targetLumArray2 = newArray();
		targetCtrstArray2 = newArray();
		targetAvalArray2 = newArray();
		targetBvalArray2 = newArray();
		
		
		
		Lum_MeanArray = newArray();
		Lum_ErrorArray = newArray();
		
		Pattern_MeanArray = newArray();
		Pattern_ErrorArray = newArray();
		
		Colour_MeanArray = newArray();
		Colour_ErrorArray = newArray();
		
		GabRat_MeanArray = newArray();
		GabRat_ErrorArray = newArray();
		
		imageNumArray=newArray();
		XcoordArray = newArray();
		YcoordArray = newArray();
		rotationArray = newArray();
		flipArray = newArray();
		XcropArray = newArray();
		YcropArray = newArray();
		
		IDarrayCheck = newArray();
 

		
		startTimeTest = getTime();
		TestTime= getTime()- startTimeTest;

		FolderName=File.getName(survivalDIR);
		
		
			oldestGen=-1;
			NewAnalysisGate = 1;
		
			if(File.exists(survivalDIR+"Data_Output.txt")){
			referenceString=File.openAsString(survivalDIR+"Data_Output.txt");	// open txt data file
			referenceRows=split(referenceString, "\n");
			referenceRows=Array.deleteIndex(referenceRows, 0);
			
			if(referenceRows.length>0){
			temp = split(referenceRows[referenceRows.length-1], "\t");
			oldestGen = temp[0];
			}
			
			if(referenceRows.length == (survivalArray.length * PopSize)){
			NewAnalysisGate = 0;
			}
		
			}
			
			if(File.exists(survivalDIR+"Data_Output_" + FolderName + ".txt")){
			
			referenceString=File.openAsString(survivalDIR+"Data_Output_" + FolderName + ".txt");	// open txt data file
			
			referenceRows=split(referenceString, "\n");
			
			if(referenceRows.length>0){
			referenceRows=Array.deleteIndex(referenceRows, 0);
			
			if(referenceRows.length>0){
			temp = split(referenceRows[referenceRows.length-1], "\t");
			oldestGen = temp[0];
			}
			
			if(referenceRows.length == (survivalArray.length * PopSize)){
			NewAnalysisGate = 0;
			}
			}
			}
			
			
			
			
			

						
			for (i=0; i<survivalArray.length; i++){

			CombinedNum = survivalDIR + "Gen_"+i+"_Ranks.txt";
			
	
			luminanceDifference = newArray();
			
			patternDifference = newArray();
			colourDifference = newArray();
			GabRatArray = newArray();
			GabRatArray_A = newArray();
			GabRatAray_B = newArray();
			
			
			bgLum = newArray();
			bgCtrst= newArray();
			bgAv = newArray();
			bgBv = newArray();
			bgAs = newArray();
			bgBs = newArray();
	
			
			targetLum = newArray();
			targetCtrst= newArray();
			targetAv = newArray();
			targetBv = newArray();
			targetAs = newArray();
			targetBs = newArray();
			
			
			
			if(i > oldestGen){
			
			CombinedNumAlt = survivalDIR + "Gen_"+i+"_Ranks.txt";

			referenceString=File.openAsString(CombinedNumAlt);	// open txt data file
			referenceRows=split(referenceString, "\n");
			referenceRows=Array.deleteIndex(referenceRows, 0);
			
			
			
			
			for(Z=0; Z<referenceRows.length; Z++){
		
			temp=split(referenceRows[Z], "\t");
			if(temp.length>0){
			IDarrayCheck = Array.concat(IDarrayCheck, temp[0]);
			imageNumArray = Array.concat(imageNumArray, temp[9]);
			XcoordArray = Array.concat(XcoordArray, parseFloat(temp[10]));
			YcoordArray = Array.concat(YcoordArray, parseFloat(temp[11]));
			rotationArray = Array.concat(rotationArray, parseFloat(temp[13]));
			flipArray = Array.concat(flipArray, temp[12]);
			XcropArray = Array.concat(XcropArray, parseFloat(temp[14]));
			YcropArray = Array.concat(YcropArray, parseFloat(temp[15]));
			}
			}
		
			

			//Array.show(IDarrayCheck);


			for(f=0; f<PopSize/numPerSlide; f++){
			
			targetDir = survivalDIR + "GenPat_"+i+"/";
			backgroundDIR = survivalDIR + "Backgrounds/";

			idM = (PopSize)*(i);
			if(oldestGen>0) idM = (PopSize)*(i-oldestGen-1);
			inV = f*numPerSlide;
			
			backgroundChoice = backgroundDIR+imageNumArray[idM +inV];

	
			open(backgroundChoice);
			rename("Background");
			
			xCrop = XcropArray[idM +inV];
			yCrop = YcropArray[idM +inV];

			
			if(cropWidth > getWidth) cropWidth = getWidth;
			if(cropHeight > getHeight) cropHeight = getHeight;
			
			makeRectangle(xCrop, yCrop, cropWidth, cropHeight);
			

			run("Crop");
			
	
			
			
			for(l=0; l<numPerSlide; l++){
			
			targetChoice = targetDir+IDarrayCheck[idM +inV+l]+".tif";
			flipChoice = flipArray[idM +inV+l];
			rotationChoice = rotationArray[idM +inV+l];
			xCoord = XcoordArray[idM +inV+l];
			yCoord = YcoordArray[idM +inV+l];
			nameNumber = l;
		

			open(targetChoice);
			rename("Target");
	
			
			//Adjust Target
			//-----------------
			run("Select All");

			if(flipChoice == "horizontal") run("Flip Horizontally");

			run("Rotate... ", "angle=[&rotationChoice] grid=1 interpolation=None");

			run("Size...", "width=&TargetChoiceScale  height=&TargetChoiceScale  depth=1 constrain interpolation=None");



			selectImage("Target");
			run("Select All");
			run("Duplicate...", "title=mask");
			run("8-bit");
			setThreshold(1, 255);
			
			run("Create Selection");
			roiManager("Add");
			roiManager("select", roiManager("count")-1);
			rename("copy");
			
			run("Select All");
			roiManager("Add")
			roiManager("select", roiManager("count")-1);
			rename("copySquare");
			
			roiManager("deselect");
			
			close("copySquare");
			
			selectImage("Target");

			roiManager("Select", roiManager("Count")-1);
			run("Copy");
		


				//Paste Target
				//-----------------

				selectImage("Background");

						roiManager("Select", roiManager("Count")-1);
						Roi.getBounds(oldX, oldY, oldWidth, oldHeight);


						
						Roi.move(xCoord, yCoord);
						roiManager("update");

						setPasteMode("Transparent-zero");
						run("Paste");
						run("Gaussian Blur...", "sigma=0.5 slice");
						

					

						roiManager("Select", roiManager("Count")-2);
						
						Roi.getBounds(x, y, width, height);
						
						targetROIx = xCoord +(x-oldX);
						targetROIy = yCoord +(y-oldY);

						Roi.move(targetROIx, targetROIy);
						roiManager("Add");
						
						roiManager("select", roiManager("Count")-3);
						roiManager("delete");
						
						

			// Create ROIs
			//-----------------

			roiManager("Select", roiManager("Count")-1);
			roiManager("rename", "prey_"+nameNumber);
			
			
			if(imageMod != "none"){
			run(imageMod);
			}

			
			
			
			
			
			
			roiManager("deselect");

			roiManager("Select", roiManager("Count")-2);

			run("Fit Circle");
			run("Scale... ", "x=2 y=2 centered");
			roiManager("Add");


			roiManager("Select", roiManager("Count")-3);
			roiManager("delete");


			roiManager("Select", newArray(roiManager("Count")-1, roiManager("Count")-2 ) );
			roiManager("XOR");
			roiManager("Add");



			run("Select All");
			roiManager("Add");

			roiManager("Select", newArray(roiManager("Count")-1, roiManager("Count")-2 ) );
			roiManager("AND");
			roiManager("Add");
			roiManager("Select", roiManager("Count")-1);
			roiManager("rename", "local_"+nameNumber);

			roiManager("Select", newArray(roiManager("Count")-2,roiManager("Count")-3, roiManager("Count")-4) );
			roiManager("delete");
			
			close("Target");

			
			
			}

			rename("Analyse");
	
		
			
		
			selectImage("Analyse");
			
			
			roiManager("select", Array.getSequence(roiManager("count")));
				
		
			
								//Get Measuements
								//-----------------------------
								
								selectImage("Analyse");
								run("Lab Stack");
								run("32-bit");
								

								run("Set Measurements...", "mean standard redirect=None decimal=9");
								run("Clear Results");

								roiManager("select", Array.getSequence( roiManager("count") ) );
								roiManager("multi-measure one");


								for(l=0; l<numPerSlide; l++) {


									//L mean difference
									//-----------------------
									targetColumn = "Mean(prey_"+l+")";
									targetL = getResult(targetColumn , 0);
									targetL = parseFloat(targetL);

									localColumn = "Mean(local_"+l+")";
									localL = getResult(localColumn, 0);
									localL  = parseFloat(localL );

									Ldiff = Math.sqrt( Math.sqr(localL - targetL));

									luminanceDifference = Array.concat(luminanceDifference, Ldiff );

									
									bgLum = Array.concat(bgLum, localL );
									targetLum = Array.concat(targetLum, targetL );
												
												
									//Pattern difference
									//-----------------------
									targetColumn = "StdDev(prey_"+l+")";
									targetP = getResult(targetColumn , 0);
									targetP = parseFloat(targetP);

									localColumn = "StdDev(local_"+l+")";
									localP = getResult(localColumn, 0);
									localP = parseFloat(localP);

									Pdiff = Math.sqrt( Math.sqr(localP - targetP));

									patternDifference = Array.concat(patternDifference, Pdiff );
									
									bgCtrst = Array.concat(bgCtrst, localP);
									targetCtrst = Array.concat(targetCtrst, targetP );

									//Colour difference
									//-----------------------
									// A
									//-----
									
									//Mean.......
									
									targetColumn = "Mean(prey_"+l+")";
									targetA = getResult(targetColumn , 1);
									targetA = parseFloat(targetA);

									localColumn = "Mean(local_"+l+")";
									localA = getResult(localColumn, 1);
									localA = parseFloat(localA);


									Adiff = Math.sqr(localA - targetA);
									
									bgAv = Array.concat(bgAv , localA);
									targetAv = Array.concat(targetAv, targetA);	

									//Contrast.......
									
									targetColumn = "StdDev(prey_"+l+")";
									targetSA = getResult(targetColumn , 1);
									targetSA = parseFloat(targetSA);

									localColumn = "StdDev(local_"+l+")";
									localSA = getResult(localColumn, 1);
									localSA = parseFloat(localA);


									ASdiff = Math.sqr(localSA - targetSA);
									
									bgAs = Array.concat(bgAs , localSA);
									targetAs = Array.concat(targetAs, targetSA);	
									

									

									// B
									//-----							
																		
									//Mean.......
									
									targetColumn = "Mean(prey_"+l+")";
									targetB = getResult(targetColumn , 2);
									targetB = parseFloat(targetB);

									localColumn = "Mean(local_"+l+")";
									localB = getResult(localColumn, 2);
									localB = parseFloat(localB);

									Bdiff = Math.sqr(localB - targetB);

									Cdiff = Math.sqrt(Adiff + Bdiff);

									colourDifference = Array.concat(colourDifference, Cdiff );

									bgBv = Array.concat(bgBv , localB);
									targetBv = Array.concat(targetBv, targetB);	
									
									//Contrast.......
									
									targetColumn = "StdDev(prey_"+l+")";
									targetSB = getResult(targetColumn , 2);
									targetSB = parseFloat(targetSB);

									localColumn = "StdDev(local_"+l+")";
									localSB = getResult(localColumn, 2);
									localSB = parseFloat(localB);


									BSdiff = Math.sqr(localSB - targetSB);
									
									bgBs = Array.concat(bgBs , localSB);
									targetBs = Array.concat(targetBs, targetSB);			

								}



											

								//GABRAT
								//---------------------------
	
								
								function 	roiGetList(String1){


								roiList1 = newArray();
								roiLocs1 = newArray();
								roiFullList1 = newArray();
								nROIs1 = roiManager("count");

								for(j=0; j<nROIs1; j++){
									roiManager("Select", j);
									tStr = getInfo("selection.name");
									roiFullList1 = Array.concat(roiFullList1, tStr);
									if(startsWith(tStr, String1) == true){
										roiList1 = Array.concat(roiList1, tStr);
										roiLocs1= Array.concat(roiLocs1, j);
										}
									}

								return roiLocs1;

								}


								LOCALS = roiGetList("local");
								roiManager("select", LOCALS);
								roiManager("delete");



								run("Clear Results");
								run("Set Measurements...", "area mean min redirect=None decimal=9");
								angles = 6;
								sigma = 3.0;
								gamma = 1.0;
								freq = 2.0;


								for(j=0; j<roiManager("count"); j++){


								roiManager("Select", j);

								tStr = getInfo("selection.name");

								if(startsWith(tStr, "Scale Bar") == false){ // only measure ROIs which aren't scale bars
								tStr = getTitle + "_" + tStr;

								for(z=0;z<3;z++){
										setSlice(z+1);
										tStr2 = tStr + "_" + getMetadata("Label");
										run("GabRat Disruption", "number_of_angles=&angles sigma=&sigma gamma=&gamma frequency=&freq label=&tStr2");
								}


								targetGAB = getResult("GabRat" , 0);
								GabRatArray = Array.concat(GabRatArray, parseFloat(targetGAB));
								
								
								targetGABa = getResult("GabRat" , 1);
								GabRatArray_A  = Array.concat(GabRatArray_A, parseFloat(targetGABa));


								targetGABb = getResult("GabRat" , 2);
								GabRatArray_B  = Array.concat(GabRatArray_B, parseFloat(targetGABb));
								

								run("Clear Results");
								}// scale bar
								}//j roi


						
					
			
			roiManager("select", Array.getSequence(roiManager("count")));

			roiManager("delete");

			close("Analyse");
			}
			}

			
			if(i<=oldestGen){
			for(f=0; f<PopSize; f++){
			indexStr = (i*(PopSize))+f;
			temp = split(referenceRows[indexStr], "\t");
			
			// Differences
			
			luminanceDifference = Array.concat(luminanceDifference, parseFloat(temp[7]));
			patternDifference = Array.concat(patternDifference, parseFloat(temp[8]));
			colourDifference = Array.concat(colourDifference, parseFloat(temp[9]));
			GabRatArray = Array.concat(GabRatArray, parseFloat(temp[10]));
			GabRatArray_A  = Array.concat(GabRatArray_A, parseFloat(temp[11]));
			GabRatArray_B = Array.concat(GabRatArray_B, parseFloat(temp[12]));
			
			//Local Background
			
			bgLum = Array.concat(bgLum, parseFloat(temp[13]));
			bgCtrst = Array.concat(bgCtrst, parseFloat(temp[14]));
			
			bgAv = Array.concat(bgAv, parseFloat(temp[15]));
			bgAs = Array.concat(bgAs, parseFloat(temp[16]));
			
			bgBv = Array.concat(bgBv , parseFloat(temp[17]));
			bgBs = Array.concat(bgBv , parseFloat(temp[18]));
			
			
			// Target
			
			targetLum = Array.concat(targetLum, parseFloat(temp[19]));
			targetCtrst = Array.concat(targetCtrst, parseFloat(temp[20]));
			
			targetAv = Array.concat(targetAv, parseFloat(temp[21]));
			targetAs = Array.concat(targetAs, parseFloat(temp[22]));
			
			targetBv = Array.concat(targetBv, parseFloat(temp[23]));
			targetBs = Array.concat(targetBs, parseFloat(temp[24]));
			
			// Coordinates
			
			imageNumArray = Array.concat(imageNumArray, temp[25]);
			XcoordArray = Array.concat(XcoordArray, parseFloat(temp[26]));
			YcoordArray = Array.concat(YcoordArray, parseFloat(temp[27]));
			rotationArray = Array.concat(rotationArray, parseFloat(temp[28]));
			flipArray = Array.concat(flipArray, temp[29]);
			XcropArray = Array.concat(XcropArray, temp[30]);
			YcropArray = Array.concat(YcropArray, temp[31]);
 
			}
			}
			
		
		
	
			
			LumArray2 = Array.concat(LumArray2, luminanceDifference);
			PatternArray2 = Array.concat(PatternArray2, patternDifference);
			ColourArray2 = Array.concat(ColourArray2, colourDifference);
			GabRatArray2 = Array.concat(GabRatArray2 , GabRatArray);
			
			GabRatArray_A2 = Array.concat(GabRatArray_A2 , GabRatArray_A);
			GabRatArray_B2 = Array.concat(GabRatArray_B2 , GabRatArray_B);

			bgLumArray2 = Array.concat(bgLumArray2, bgLum);
			bgCtrstArray2 = Array.concat(bgCtrstArray2 , bgCtrst);
			bgAvalArray2 = Array.concat(bgAvalArray2, bgAv);
			bgBvalArray2 = Array.concat(bgBvalArray2, bgBv);
			
			bgAconArray2 =  Array.concat(bgAconArray2, bgAs);
			bgBconArray2 =  Array.concat(bgBconArray2, bgBs);
		
			targetLumArray2 = Array.concat(targetLumArray2, targetLum);
			targetCtrstArray2 = Array.concat(targetCtrstArray2, targetCtrst);
			targetAvalArray2 = Array.concat(targetAvalArray2, targetAv);
			targetBvalArray2 = Array.concat(targetBvalArray2, targetBv);
			
			targetAconArray2 =  Array.concat(targetAconArray2, targetAs);
			targetBconArray2 =  Array.concat(targetBconArray2, targetBs);
					
		
			
			Array.getStatistics(luminanceDifference, min, max, mean, stdDev);
			Lum_MeanArray  = Array.concat(Lum_MeanArray , mean);
			Lum_ErrorArray =  Array.concat(	Lum_ErrorArray, stdDev/Math.sqrt(luminanceDifference.length));
			
			Array.getStatistics( patternDifference, min, max, mean, stdDev);
			Pattern_MeanArray  = Array.concat(Pattern_MeanArray , mean);
			Pattern_ErrorArray =  Array.concat(	Pattern_ErrorArray, stdDev/Math.sqrt(patternDifference.length));
			
			Array.getStatistics( colourDifference, min, max, mean, stdDev);
			Colour_MeanArray  = Array.concat(Colour_MeanArray , mean);
			Colour_ErrorArray =  Array.concat(	Colour_ErrorArray, stdDev/Math.sqrt(colourDifference.length));
			
			Array.getStatistics(GabRatArray, min, max, mean, stdDev);
			GabRat_MeanArray  = Array.concat(GabRat_MeanArray , mean);
			GabRat_ErrorArray =  Array.concat(	GabRat_ErrorArray, stdDev/Math.sqrt(GabRatArray.length));
			
			
			
			

			}

scaledLuminance = newArray();
scaledPattern = newArray();
scaledColour = newArray();
scaledGabRat = newArray();


Array.getStatistics(Lum_MeanArray, min, max, mean, stdDev);
for(i=0; i< Lum_MeanArray.length; i++){
scaledLuminance = Array.concat(scaledLuminance, (Lum_MeanArray[i]-mean)/stdDev);
}

Array.getStatistics(Pattern_MeanArray, min, max, mean, stdDev);
for(i=0; i< Pattern_MeanArray.length; i++){
scaledPattern = Array.concat(scaledPattern, (Pattern_MeanArray[i]-mean)/stdDev);
}

Array.getStatistics(Colour_MeanArray, min, max, mean, stdDev);
for(i=0; i< Colour_MeanArray.length; i++){
scaledColour = Array.concat(scaledColour, (Colour_MeanArray[i]-mean)/stdDev);
}

Array.getStatistics(GabRat_MeanArray, min, max, mean, stdDev);
for(i=0; i< GabRat_MeanArray.length; i++){
scaledGabRat = Array.concat(scaledGabRat, (GabRat_MeanArray[i]-mean)/stdDev);
}







//=================================================
//Save Data
//=================================================


			
dataFile = File.open(survivalDIR+"Data_Output_" + FolderName + ".txt");  

printArray = Array.concat("Generation", "ID","Fitness","Rank", "Survival_Time", "Response_Time", "Capture_Time", "Luminance_Difference", "Contrast_Difference", "Colour_Difference", "Luminance_Edge_Disruption", "Green-Red_Edge_Disruption", "Blue-Yellow_Edge_Disruption","BgLocal_L_mean", "BgLocal_L_contrast", "BgLocal_A_mean", "BgLocal_A_contrast", "BgLocal_B_mean","BgLocal_B_contrast", "Target_L_mean", "Target_L_contrast", "Target_A_mean", "Target_A_contrast", "Target_B_mean", "Target_B_contrast",  "Image_ID", "X_Coordinate", "Y_Coordinate", "Rotation", "Flip","Crop_X","Crop_Y");

printString = String.join(printArray, "\t");

printString= printString + "\t" + GenomeNames;

print(dataFile, printString);


for(i=0; i< GenArray.length;i++){

printArray = Array.concat(GenArray[i], IDarray[i], FitnessArray[i],RankingArray[i],SurvivalArray[i], ResponseArray[i], CaptureArray[i], LumArray2[i], PatternArray2[i], ColourArray2[i], GabRatArray2[i],GabRatArray_A2[i],GabRatArray_B2[i],bgLumArray2[i],bgCtrstArray2[i],bgAvalArray2[i], bgAconArray2[i], bgBvalArray2[i], bgBconArray2[i], targetLumArray2[i],targetCtrstArray2[i],targetAvalArray2[i],targetAconArray2[i],targetBvalArray2[i], targetBconArray2[i],imageNumArray[i], XcoordArray[i], YcoordArray[i], rotationArray[i], flipArray[i], XcropArray[i],YcropArray[i] );

printString = String.join(printArray, "\t") + "\t" + genomeArray[i];

print(dataFile, printString);
	
}

File.close(dataFile);

string = "choose-population=["+gameDIR+"]";









			
//=================================================
//Create Plots
//=================================================


			//  Lum Plot
			// -----------------------	
			
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( Lum_MeanArray, min, max, mean, stdDev);
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
			
				Plot.create("Line Plot", "Generation", "Luminance Difference", shortGenArray, Lum_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", Lum_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=LuminancePlot");
run("Invert");
selectImage("LuminancePlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);



			//  Pattern Plot
			// -----------------------	 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( Pattern_MeanArray, min, max, mean, stdDev);
					
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
				
				
			
				Plot.create("Line Plot", "Generation", "Contrast Difference", shortGenArray, Pattern_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", Pattern_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=PatternPlot");
run("Invert");
selectImage("PatternPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);



			//  Colour Plot
			// -----------------------					 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( Colour_MeanArray, min, max, mean, stdDev);
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
				
				
			
				Plot.create("Line Plot", "Generation", "Colour Difference", shortGenArray, Colour_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", Colour_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=ColourPlot");
run("Invert");
selectImage("ColourPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

run("Scale...", ts);
run("Canvas Size...", ts2);


			//  GabRat Plot
			// -----------------------				
				 
				Array.getStatistics( shortGenArray, min, max, mean, stdDev);
				xMax = max+0.2;
				xMin = min;
				Array.getStatistics( GabRat_MeanArray, min, max, mean, stdDev);
				yMax = max+stdDev;
				yMin = min-stdDev;
				if(yMin<0){
				yMin=0;
				}
				
				
			
				Plot.create("Line Plot", "Generation", "GabRat", shortGenArray, GabRat_MeanArray);
				Plot.setLineWidth(3);
				Plot.setFontSize(30);
				Plot.setAxisLabelSize(36, "bold");
				Plot.setOptions("addhspace=15 addvspace=15");
				
				Plot.setLimits(0,  xMax, yMin, yMax);
				Plot.setLineWidth(2);
				
				Plot.add("error bars", GabRat_ErrorArray);
				
				Plot.show();
			

run("Select All");
run("Duplicate...", "title=GabRatPlot");
run("Invert");
selectImage("GabRatPlot");

run("Select All");
Roi.getBounds(x, y, width, height);

plotScale = 522/width;

ts = "x=- y=- width="+ width*plotScale + " height=" + height*plotScale  + "  interpolation=None";
ts2 = "width="+ width*plotScale + " height=" + height*plotScale + " position=Center";

plotHeight = 600;
plotWidth = 600;

run("Scale...", ts);
run("Canvas Size...", ts2);




//=================================================
//Get Top 9 Target Pictures
//=================================================


GenNum = survivalDIR + "gen_" + (survivalArray.length-1) +"_ranks"  + txt;

GenName = "gen_" + (survivalArray.length-1);

PhenotypePath =  survivalDIR+"GenPat_"+ (survivalArray.length-1) +"/";



				referenceString=File.openAsString(GenNum);	// open txt data file
				referenceRows=split(referenceString, "\n");

				IDarray2 =newArray(referenceRows.length-1);
				FitnessArray2 =newArray(referenceRows.length-1);

				for(j=1;j<referenceRows.length;j++){
				tempArray = split(referenceRows[j], "\t");
				IDarray2[j-1]=tempArray [0];
				
				tVal = parseFloat( tempArray [1] );
				FitnessArray2[j-1]= tVal;
				}

				

	

				IDRankedarray = newArray();

				IDSort=Array.copy(IDarray2);
				FitnessRanked = Array.copy(FitnessArray2);
				
				Array.sort(FitnessRanked,IDSort );
				
							


for(i=0; i<3; i++){
				
for(j=0; j<3; j++){


IDnam = IDSort[IDSort.length-1 - ((i*3)+j)];

open(PhenotypePath+IDnam+".tif");
wait(10);
selectImage(IDnam+".tif");
run("Select All");
run("Size...", "width=157 height=157 depth=1 constrain average interpolation=Bilinear");
run("Select All");
run("Copy");
close(IDnam+".tif");

selectImage("EndScreen");
slide=3;

setSlice(slide);

makeRectangle( 817  + (177*j) + (iButtonShift/2), 300 + (186*i), 157,157);
setPasteMode("Transparent-zero");
run("Paste");
run("Select None");

setJustification("center");
setColor("white");
setFont("SansSerif",18);

Rank = "Rank " + j+1 + (i*3);

drawString(Rank , 817 + (177*j)+(177/2) + (iButtonShift/2), (300 + (186*i))+ 186);


}
}			

//Array.show(IDarrayCheck, IDarray, genomeArray);






//=================================================
//Get First and Last Genome for Distribution Plot
//=================================================

genFirst=File.openAsString( survivalDIR  + "gen_0_genes" + txt);
genFirstRows = split(genFirst, "\n");

genLast =File.openAsString( survivalDIR + "gen_" + (survivalArray.length-1) + "_genes"  + txt);
genLastRows = split(genLast, "\n");

GeneTitleList = split(genFirstRows[0], "\t");
GeneChoiceList = Array.slice(GeneTitleList, 1, GeneTitleList.length-2);


//=================================================
//Display Averages
//=================================================


// Give Average times
//------------------------------
selectImage("EndScreen");
setColor("white");
setFont("Caldibri ", 30);
setJustification("left");

 stringT= "Average Times:";
 drawString(stringT, 195 + (iButtonShift/2), 340);
 
 
 setFont("Caldibri ", 24);

 stringT= "Generation 0 = " + toString( (FitnessMeanArray[0]/1000), 2)+ " seconds";
 drawString(stringT, 195 + (iButtonShift/2), 390);
 
 stringT= "Generation "+ FitnessMeanArray.length-1 +" = " + toString((FitnessMeanArray[FitnessMeanArray.length-1]/1000), 2)+ " seconds";
 drawString(stringT, 195 + (iButtonShift/2), 430);

selectImage("CopyPlot");
run("Select All");
Roi.getBounds(x, y, plotWidth, plotHeight);
run("Copy");
setPasteMode("transparent-zero");


selectImage("EndScreen");
setSlice(3);
makeRectangle(134 + (iButtonShift/2),454,plotWidth, plotHeight);
run("Paste");
run("Select None");


setSlice(4);


// Give Average Camo Stats
//------------------------------
open(getDirectory("plugins") + "1 CamoEvo/Interface/buttonCover.jpg");
selectImage("EndScreen");
setSlice(4);

overlayPasteX = 170 + (iButtonShift/2);

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX  y=300 opacity=60");

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX y=420 opacity=60");

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX y=550 opacity=60");

run("Add Image...", "image=buttonCover.jpg x=overlayPasteX y=680 opacity=60");

Overlay.moveSelection(0, 170 + iButtonShift/2, -300);
Overlay.moveSelection(1, 170 + iButtonShift/2, 420);
Overlay.moveSelection(2, 170 + iButtonShift/2, 550);
Overlay.moveSelection(3, 170 + iButtonShift/2, 680);

setColor("#16150D");
fillRect(792 + (iButtonShift/2), 248, 562, 574);

setColor("white");

setFont("Caldibri ", 30);

stringT= "Luminance Match:";
 drawString(stringT, 830 + (iButtonShift/2), 290);
 
				  if( startsWith(getInfo("os.name"), "Windows") ==1){
  					setFont("Caldibri ", 22, "bold");
							} else {
  					setFont("Caldibri ", 18, "bold");
					}	
					
		  stringT= "Difference of Mean Luminance.";
		
		 drawString(stringT, 830 + (iButtonShift/2) , 330);
		 
		   stringT= "As difference 'decreases' camouflage improves.";
		
		 drawString(stringT,  830 + (iButtonShift/2) ,370);
		 
			stringT= "Generation 0 mean = " + toString (Lum_MeanArray[0]);
		 
		 drawString(stringT, 830 + (iButtonShift/2) , 410);
		 
			 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Lum_MeanArray[FitnessMeanArray.length-1]);
		 
		 drawString(stringT, 830 + (iButtonShift/2) , 450);
				
				selectImage("LuminancePlot");
				run("Select All");
				Roi.getBounds(x, y, plotWidth, plotHeight);
				run("Copy");
				setPasteMode("transparent-zero");


				selectImage("EndScreen");
				setSlice(4);
				makeRectangle(800 + (iButtonShift/2),474,plotWidth, plotHeight);
				run("Paste");
				run("Select None");
				setColor("White");

setSlice(4);

//----------------------------------------------------------------------------------------------------------------
// 3) Show Analysis Menu
//----------------------------------------------------------------------------------------------------------------

//=================================================
//Close Unnecessary Slides
//=================================================


selectImage("EndScreen");
slide=2;
setSlice(slide);


if(isOpen("Evolving")){
close("Evolving");
}

if(isOpen("Analysing")){
close("Analysing");
}



//=================================================
//Show the end screen
//=================================================

previewGate = 0;
downloadGate = 0;
endGate = 0;

run("Canvas Size...", "width=&interfaceWidth height=&interfaceHeight  position=Center");
setBatchMode("Show");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);


while(endGate==0){

slide=2;

setSlice(slide);

previewGate = 0;

//BUTTON 1, Preview Results
//-----------------------------------------


	b1_x1= 386 + (iButtonShift/2);
	b1_y1= 478;

	b1_x2= b1_x1 + 694;
	b1_y2= b1_y1 + 156;
	
	
//BUTTON 2, Download Results
//-----------------------------------------


	b2_x1= 386 + (iButtonShift/2);
	b2_y1= 688;

	b2_x2= b2_x1 + 694;
	b2_y2= b2_y1 + 156;
	
	
//BUTTON 3, Exit
//-----------------------------------------


	b3_x1= 386 + (iButtonShift/2);
	b3_y1= 896;

	b3_x2= b3_x1 + 694;
	b3_y2= b3_y1 + 156;



	
	
if(getSliceNumber()==2){
wait(75);

	flag=0;
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;

		clickX=mouseX; 
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		Tool=1; 
		  if(flag&leftButton!=0){

		previewGate = 1;
		setSlice(3);
		slide=3;
		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {
		
		Tool=1; 
		  if(flag&leftButton!=0){

		downloadGate = 1;
		
		datafileDIR = getDirectory("Select the Folder you wish to download your results to.");
		
		if(File.exists(survivalDIR + "Data_Output.txt")){
		File.copy(survivalDIR + "Data_Output.txt", datafileDIR + "Data_Output.txt");
		}
		
		if(File.exists(survivalDIR+"Data_Output_" + FolderName + ".txt")){
		File.copy(survivalDIR+"Data_Output_" + FolderName + ".txt", datafileDIR + "Data_Output_" + FolderName + ".txt");
		}
		
		wait(75);
		}
		}
		
		
		//Button 3
		//-----------------
		if( clickX > b3_x1   &&    clickX < b3_x2   &&   clickY > b3_y1 &&  clickY < b3_y2) {
		Tool=1; 
		  if(flag&leftButton!=0){

		endGate = 1;
		
		wait(75);
		}
		}
		

		run("Select None");
		if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
		}

		}


// Present the Preview Screen
//---------------------------------------

if(previewGate == 1) {
wait(300);

				//BUTTON 1, Right Arrow
				//-----------------------------------------


					b1_x1= 1013  + (iButtonShift/2);
					b1_y1= 898;

					b1_x2= b1_x1 + 205;
					b1_y2= b1_y1 + 160;
					
					
				//BUTTON 2, Left Arrow
				//-----------------------------------------


					b2_x1= 260 + (iButtonShift/2);
					b2_y1= 898;

					b2_x2= b2_x1 + 205;
					b2_y2= b2_y1 + 160;
					
					
					
				//BUTTON 3, Luminance
				//-----------------------------------------


					b3_x1= 182 + (iButtonShift/2);
					b3_y1= 310;

					b3_x2= b3_x1 + 448;
					b3_y2= b3_y1 + 96;
					
					
				//BUTTON 4, Pattern
				//-----------------------------------------


					b4_x1= 182 + (iButtonShift/2);
					b4_y1= 440;

					b4_x2= b4_x1 + 448;
					b4_y2= b4_y1 + 96;
					
					
				//BUTTON 5, Colour
				//-----------------------------------------


					b5_x1= 182 + (iButtonShift/2);
					b5_y1= 580;

					b5_x2= b5_x1 + 448;
					b5_y2= b5_y1 + 96;
					
				//BUTTON 6, Disruption
				//-----------------------------------------


					b6_x1= 182 + (iButtonShift/2);
					b6_y1= 698;

					b6_x2= b6_x1 + 448;
					b6_y2= b6_y1 + 96;
				
				
				//BUTTON 7, Gene Choice
				//-----------------------------------------


					b7_x1= 534 + (iButtonShift/2);
					b7_y1= 769;

					b7_x2= b7_x1 + 409;
					b7_y2= b7_y1 + 159;
					
				
				
				
	whileGate=0;

	run("Select None");
				
	slide = 3;

	while(whileGate==0){

	wait(100);

	selectImage("EndScreen");
					

	
	setSlice(slide);
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
		{

		flag=0;
		getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
		clickX=mouseX; 
		clickY=mouseY;

						//Button 1
						//-----------------
						if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {

						Tool=1;
						if(flag&leftButton!=0){wait(75);
						
						if(slide==5){
						whileGate=1;
						}
						
						if(slide==4){
						slide=5;
						}
						
						if(slide==3){
						slide=4;
						}
						

						}
						}
						
						//Button 2
						//-----------------
						if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {

						Tool=1;   
						if(flag&leftButton!=0){wait(75);

						
						if(slide==3){
						whileGate=1;
						}
						
						if(slide==4){
						slide=3;
						}
						
						if(slide==5){
						slide=4;
						}




						}
						}
						
						//Button 3
						//-----------------
						if( clickX > b3_x1   &&    clickX < b3_x2   &&   clickY > b3_y1 &&  clickY < b3_y2) {

						if(slide==4){
						Tool=1;   
						if(flag&leftButton!=0){wait(75);
						
						Overlay.moveSelection(0, 170 + iButtonShift/2, -300);
						Overlay.moveSelection(1, 170 + iButtonShift/2, 420);
						Overlay.moveSelection(2, 170 + iButtonShift/2, 550);
						Overlay.moveSelection(3, 170 + iButtonShift/2, 680);

									setJustification("centre");
									setColor("#16150D");
									fillRect(792 + (iButtonShift/2), 248, 562, 574);

									setColor("white");
									setFont("Caldibri ", 30);
									stringT= "Luminance Match:";
									
										
									 drawString(stringT, 830 + (iButtonShift/2), 290, "#16150D");
									 
									  if( startsWith(getInfo("os.name"), "Windows") ==1){
										setFont("Caldibri ", 22, "bold");
												} else {
										setFont("Caldibri ", 18, "bold");
										}	

											  stringT= "Difference in Mean Luminance.";

											 drawString(stringT, 830  + (iButtonShift/2), 330, "#16150D");
											 
											   stringT= "As difference 'decreases' camouflage improves.";

											 drawString(stringT,  830 + (iButtonShift/2),370, "#16150D");
											 
												stringT= "Generation 0 mean = " + toString (Lum_MeanArray[0]);

											 drawString(stringT, 830 + (iButtonShift/2), 410, "#16150D");
											 
												 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Lum_MeanArray[FitnessMeanArray.length-1]);

											 drawString(stringT, 830 + (iButtonShift/2), 450, "#16150D");


									selectImage("LuminancePlot");
									run("Select All");
									Roi.getBounds(x, y, plotWidth, plotHeight);
									run("Copy");
									setPasteMode("transparent-zero");


									selectImage("EndScreen");
									setSlice(4);
									makeRectangle(800 + (iButtonShift/2),474,plotWidth, plotHeight);
									run("Paste");
									run("Select None");
									setColor("White");
				
				
				
								
						}

						}
						}
						
					
							//Button 4
						//-----------------
						if( clickX > b4_x1   &&    clickX < b4_x2   &&   clickY > b4_y1 &&  clickY < b4_y2) {

						
						if(slide==4){

						Tool=1;   
						if(flag&leftButton!=0){wait(75);
						
						Overlay.moveSelection(0, 170 + iButtonShift/2, 300);
						Overlay.moveSelection(1, 170 + iButtonShift/2, -420);
						Overlay.moveSelection(2, 170 + iButtonShift/2, 550);
						Overlay.moveSelection(3, 170 + iButtonShift/2, 680);
						
									setJustification("centre");
									setColor("#16150D");
									fillRect(792 + (iButtonShift/2), 248, 562, 574);

									setColor("white");
									
											
									stringT= "Contrast Match:";
											 
										setFont("Caldibri ", 30);
									 drawString(stringT, 830 + (iButtonShift/2), 290);
									 
									  if( startsWith(getInfo("os.name"), "Windows") ==1){
										setFont("Caldibri ", 22, "bold");
												} else {
										setFont("Caldibri ", 18, "bold");
										}	


											  stringT= "Difference in Luminance StDev.";
											
											 drawString(stringT, 830 + (iButtonShift/2), 330);
											 
											   stringT= "As difference 'decreases' camouflage improves.";

											 drawString(stringT,  830 + (iButtonShift/2),370);
											 
												stringT= "Generation 0 mean = " + toString (Pattern_MeanArray[0]);

											 drawString(stringT, 830 + (iButtonShift/2), 410);
											 
												 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Pattern_MeanArray[FitnessMeanArray.length-1]);

											 drawString(stringT, 830 + (iButtonShift/2), 450);


									selectImage("PatternPlot");
									run("Select All");
									Roi.getBounds(x, y, plotWidth, plotHeight);
									run("Copy");
									setPasteMode("transparent-zero");


									selectImage("EndScreen");
									setSlice(4);
									makeRectangle(800 + (iButtonShift/2),474,plotWidth, plotHeight);
									run("Paste");
									run("Select None");
									setColor("White");
													
											}

											}
											}
						
						
								//Button 5
						//-----------------
						if( clickX > b5_x1   &&    clickX < b5_x2   &&   clickY > b5_y1 &&  clickY < b5_y2) {


						if(slide==4){
						Tool=1;   
						if(flag&leftButton!=0){wait(75);
						
						
						Overlay.moveSelection(0, 170 + iButtonShift/2, 300);
						Overlay.moveSelection(1, 170 + iButtonShift/2, 420);
						Overlay.moveSelection(2, 170 + iButtonShift/2, -550);
						Overlay.moveSelection(3, 170 + iButtonShift/2, 680);						
						
									setJustification("centre");
									setColor("#16150D");
									fillRect(792 + (iButtonShift/2), 248, 562, 574);

									setColor("white");
									
											stringT= "Colour Match:";
											 
										setFont("Caldibri ", 30);

									 drawString(stringT, 830 + (iButtonShift/2), 290);
									 
									  if( startsWith(getInfo("os.name"), "Windows") ==1){
										setFont("Caldibri ", 22, "bold");
												} else {
										setFont("Caldibri ", 18, "bold");
										}	


											  stringT= "Difference of Mean Colour.";
										
											 drawString(stringT, 830 + (iButtonShift/2), 330);
											 
											   stringT= "As difference 'decreases' camouflage improves.";
										
											 drawString(stringT,  830 + (iButtonShift/2),370);
											 
												stringT= "Generation 0 mean = " + toString (Colour_MeanArray[0]);
										
											 drawString(stringT, 830 + (iButtonShift/2), 410);
											 
												 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(Colour_MeanArray[FitnessMeanArray.length-1]);
										
											 drawString(stringT, 830 + (iButtonShift/2), 450);

									
									selectImage("ColourPlot");
									run("Select All");
									Roi.getBounds(x, y, plotWidth, plotHeight);
									run("Copy");
									setPasteMode("transparent-zero");


									selectImage("EndScreen");
									setSlice(4);
									makeRectangle(800 + (iButtonShift/2),474,plotWidth, plotHeight);
									run("Paste");
									run("Select None");
									setColor("White");				
											}

											}
											}	


								//Button 6
						//-----------------
						if( clickX > b6_x1   &&    clickX < b6_x2   &&   clickY > b6_y1 &&  clickY < b6_y2) {

					
						if(slide==4){
						Tool=1;   
						if(flag&leftButton!=0){wait(75);				
						
						Overlay.moveSelection(0, 170 + iButtonShift/2, 300);
						Overlay.moveSelection(1, 170 + iButtonShift/2, 420);
						Overlay.moveSelection(2, 170 + iButtonShift/2, 550);
						Overlay.moveSelection(3, 170 + iButtonShift/2, -680);

						
							setJustification("centre");
							setColor("#16150D");
							fillRect(792 + (iButtonShift/2), 248, 562, 574);

							setColor("white");
										
									stringT= "Edge Disruption:";
									 
								setFont("Caldibri ", 30);
							 drawString(stringT, 830 + (iButtonShift/2), 290);
							 
							  if( startsWith(getInfo("os.name"), "Windows") ==1){
								setFont("Caldibri ", 22, "bold");
										} else {
								setFont("Caldibri ", 18, "bold");
								}	

									  stringT= "Level of GabRat.";
									
									 drawString(stringT, 830 + (iButtonShift/2), 330);
									 
									   stringT= "As GabRat 'increases' camouflage improves.";
							
									 drawString(stringT,  830 + (iButtonShift/2),370);
									 
										stringT= "Generation 0 mean = " + toString (GabRat_MeanArray[0]);
							
									 drawString(stringT, 830 + (iButtonShift/2), 410);
									 
										 stringT= "Generation "+ FitnessMeanArray.length-1 +" mean = " + toString(GabRat_MeanArray[FitnessMeanArray.length-1]);
									
									 drawString(stringT, 830 + (iButtonShift/2), 450);


						
							selectImage("GabRatPlot");
							run("Select All");
							Roi.getBounds(x, y, plotWidth, plotHeight);
							run("Copy");
							setPasteMode("transparent-zero");


							selectImage("EndScreen");
							setSlice(4);
							makeRectangle(800 + (iButtonShift/2),474,plotWidth, plotHeight);
							run("Paste");
							run("Select None");
							setColor("White");
											
									}

									}	
									}
									
									
								//Button 7
						//-----------------
						if( clickX > b7_x1   &&    clickX < b7_x2   &&   clickY > b7_y1 &&  clickY < b7_y2) {

					
						if(slide==5){
						Tool=1;   
						if(flag&leftButton!=0){wait(75);	
									

									Dialog.createNonBlocking("Get Gene");
									Dialog.addChoice("Choose a Gene", GeneChoiceList,0);
									Dialog.show();

									GeneChoice = Dialog.getChoice();
									GeneIndex = index(GeneTitleList, GeneChoice);

									firstGeneValues = newArray(genFirstRows.length-1);
									lastGeneValues = newArray(genFirstRows.length-1);

									for(i=0; i<firstGeneValues.length; i++ ) {

									tempArray1  = split(genFirstRows[i+1], "\t");
									firstGeneValues[i] =   parseFloat(tempArray1[GeneIndex]) ;

									tempArray2  = split(genLastRows[i+1], "\t");
									lastGeneValues[i] =  parseFloat(tempArray2[GeneIndex]) ;
									
									}


									yArray = newArray(firstGeneValues.length);

									if(isOpen("Gen_0")){
									close("Gen_0");
									}

									if(isOpen("Gen_15")){
									close("Gen_15");
									}


									Array.getStatistics( firstGeneValues, min, max, firstMean, firstStdDev);
									Array.getStatistics( lastGeneValues, min, max, lastMean,lastStdDev);
									
									
									if(isNaN(firstStdDev)){
									firstStdDev = 0;
									}
									if(isNaN(lastStdDev)){
									lastStdDev = 0;
									}

									if(isOpen("GenePlots")){
									close("GenePlots");
									}


									selectImage("EndScreen");

									setColor("#16150D");
									fillRect(226 + (iButtonShift/2), 318, 1020, 406);
									setColor("white");

									// =================================================
									// Create new Plot Image
									// =================================================


									//makeRectangle(578, 320,  680, 400);

									plotWidth = 800;
									plotHeight = 400;

									newImage("GenePlots", "RGB black", plotWidth, plotHeight, 1);
									selectImage("GenePlots");
						


									ovalW = 10;
									ovalH =60;
									lineW = plotWidth*5/6;
									setLineWidth(2);
									
									
									//-------------------------
									// Generation First
									//-------------------------

									rtX = (plotWidth-(lineW))/2;
									rtY = (plotHeight*0.25)+20;

									setColor("white");
									fillRect(rtX, rtY,(lineW), 2);

									setJustification("center");
									setColor("white");
									setFont("Caldibri ", 26);
									stringT= "Generation 0";
									drawString(stringT, plotWidth/2, rtY+ovalH+30);

									setFont("Caldibri ", 18);
									stringT= "0.0";
									drawString(stringT, rtX+2, rtY+ovalH+10);

									setFont("Caldibri ", 18);
									stringT= "1.0";
									drawString(stringT, rtX+(lineW)-2, rtY+ovalH+10);

									setColor("gray");
									for(i =0; i<firstGeneValues.length; i++){
									xCoord = rtX + (firstGeneValues[i]*((lineW)-ovalW));
									rand = random("gaussian");
									makeOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									run("Add...", "value=80");
									drawOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									}



									//-------------------------
									// Generation Last
									//-------------------------

									rtX = (plotWidth-(lineW))/2;
									rtY = rtY+165;

									setColor("white");
									fillRect(rtX, rtY,(lineW), 2);

									setJustification("center");
									setColor("white");
									setFont("Caldibri ", 26);
									stringT= "Generation " + (survivalArray.length-1);
									drawString(stringT, plotWidth/2, rtY+ovalH+30);

									setFont("Caldibri ", 18);
									stringT= "0.0";
									drawString(stringT, rtX+2, rtY+ovalH+10);

									setFont("Caldibri ", 18);
									stringT= "1.0";
									drawString(stringT, rtX+(lineW)-2, rtY+ovalH+10);

									setColor("gray");
									for(i =0; i<lastGeneValues.length; i++){
									xCoord = rtX + (lastGeneValues[i]*((lineW)-ovalW));
									rand = random("gaussian");
									makeOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									run("Add...", "value=80");
									drawOval(xCoord+rand, rtY-(ovalH)/2, ovalW, ovalH);
									}


									run("Select All");
									run("Copy");

									pasteX = 448 + (iButtonShift/2);
									pasteY = 320;

									selectImage("EndScreen");
									makeRectangle(pasteX, pasteY, plotWidth, plotHeight);
									setPasteMode("Transparent-zero");
									run("Paste");
									run("Select None");
									
									close("GenePlots");

									setJustification("center");
									setColor("#66D122");
									setFont("Caldibri ", 30);
									stringT= GeneChoice;
									drawString(stringT, pasteX+(plotWidth/2), 360);




									setJustification("right");
									setColor("white");
									setFont("Caldibri ", 24);
									stringT= "Mean = " + d2s(firstMean,3);
									drawString(stringT,pasteX, 430);

									stringT= "StDv = " +d2s(firstStdDev,3);
									drawString(stringT, pasteX, 430+60);

									stringT= "Mean = " + d2s(lastMean,3);
									drawString(stringT,pasteX, 590);

									stringT= "StDv = " + d2s(lastStdDev,3);
									drawString(stringT, pasteX, 590+60);




						
									
									
						}			
									
									
									
						}		
									
						}
									

						

				run("Select None");
				if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}

				}


				}

				}
				


}

if(endGate == 1){


if(downloadGate==1){

if(isOpen("Loading")){
selectImage("Loading");

setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}
doCommand("CamoEvo Game");
exit

} else {

slide=6;

setSlice(slide);


//BUTTON 1, Exit and Save
//-----------------------------------------


	b1_x1= 440  + (iButtonShift/2);
	b1_y1= 576;

	b1_x2= b1_x1 + 598;
	b1_y2= b1_y1 + 164;
	
	
//BUTTON 2, Exit
//-----------------------------------------


	b2_x1= 440 + (iButtonShift/2);
	b2_y1= 820;

	b2_x2= b2_x1 + 598;
	b2_y2= b2_y1 + 164;


whileGate=0;

while(whileGate==0){


	
	setSlice(slide);
	getCursorLoc(mouseX, mouseY, mouseZ, flag); Tool=0;
	
	
		{
		
		


		clickX=mouseX; 
		clickY=mouseY;

		//Button 1
		//-----------------
		if( clickX > b1_x1   &&    clickX < b1_x2   &&   clickY > b1_y1 &&  clickY < b1_y2) {
		
		
	
		Tool=1;
		Tool=1;   if(flag&leftButton!=0){wait(75);
		whileGate=1;
		
		datafileDIR = getDirectory("Select the Folder you wish to download your results to.");
		
		if(File.exists(survivalDIR + "Data_Output.txt")){
		File.copy(survivalDIR + "Data_Output.txt", datafileDIR + "Data_Output.txt");
		}
		
		if(File.exists(survivalDIR+"Data_Output_" + FolderName + ".txt")){
		File.copy(survivalDIR+"Data_Output_" + FolderName + ".txt", datafileDIR + "Data_Output_" + FolderName + ".txt");
		}

		}
		}
		
		//Button 2
		//-----------------
		if( clickX > b2_x1   &&    clickX < b2_x2   &&   clickY > b2_y1 &&  clickY < b2_y2) {
		
		Tool=1;
		Tool=1;   if(flag&leftButton!=0){wait(75);
		whileGate=1;

		}
		}
		
	run("Select None");
	if(Tool != ToolOld){
			if(Tool == 0)
				setTool("arrow");
			if(Tool  == 1)
				setTool("hand");
		ToolOld= Tool;
}

		}



}


}

if(isOpen("Loading")){
selectImage("Loading");


setBatchMode("Show");
run("Maximize");
setLocation(interfaceX, interfaceY, interfaceW, interfaceH);
 run("Animation Options...", "speed="+6);
doCommand("Start Animation");
setBatchMode(false);
close("\\Others");
} else{
close("*");
}
doCommand("CamoEvo Game");
exit


}

}



}
//print("loop");
}

